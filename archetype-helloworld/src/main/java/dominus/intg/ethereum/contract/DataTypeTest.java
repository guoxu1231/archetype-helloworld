package dominus.intg.ethereum.contract;

import java.lang.String;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.Contract;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;

/**
 * <p>Auto generated code.<br>
 * <strong>Do not modifiy!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.</p>
 */
public final class DataTypeTest extends Contract {
    private static final String BINARY = "606060405234610000575b60008054600160a060020a03191633600160a060020a03161790555b5b610b93806100366000396000f300606060405236156100885763ffffffff60e060020a60003504166311016128811461008d5780631f4fa5ba146100c45780635e5a09e0146100e357806367e919b6146101555780636f792bcc1461017f5780638da5cb5b146101d4578063d54dc85c1461020a578063dadaa1db1461029a578063e47578da146102c4578063ecc09ad214610324575b610000565b34610000576100a76001608060020a031960043516610340565b604080516001608060020a03199092168252519081900360200190f35b34610000576100d1610358565b60408051918252519081900360200190f35b346100005760408051602060046024803582810135601f81018590048502860185019096528585526101419583356001608060020a03191695939460449493929092019181908401838280828437509496506103a795505050505050565b604080519115158252519081900360200190f35b34610000576100a7610516565b604080516001608060020a03199092168252519081900360200190f35b34610000576101d2600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061052295505050505050565b005b34610000576101e1610673565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b346100005761021a60043561068f565b604080516020808252835181830152835191928392908301918501908083838215610260575b80518252602083111561026057601f199092019160209182019101610240565b505050905090810190601f16801561028c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576100a7610737565b604080516001608060020a03199092168252519081900360200190f35b346100005760408051602060046024803582810135601f81018590048502860185019096528585526101d29583356001608060020a031916959394604494939290920191819084018382808284375094965061074495505050505050565b005b34610000576101d26001608060020a031960043516610a61565b005b600360205260009081526040902054608060020a0281565b60006103a161039c604060405190810160405280600481526020017f7661723200000000000000000000000000000000000000000000000000000000815250610a7d565b610aad565b90505b90565b600180546001608060020a031916608060020a84041781556002805491820180825560009290828183801582901161045d5760008381526020902061045d9181019083015b8082111561044a57600081805460018160011615610100020316600290046000825580601f1061041c575061044e565b601f01602090049060005260206000209081019061044e91905b8082111561044a5760008155600101610436565b5090565b5b50506001016103ec565b5090565b5b505050916000526020600020900160005b8490919091509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104be57805160ff19168380011785556104eb565b828001600101855582156104eb579182015b828111156104eb5782518255916020019190600101906104d0565b5b5061050c9291505b8082111561044a5760008155600101610436565b5090565b5050505b92915050565b600154608060020a0281565b600280548060010182818154818355818115116105bd576000838152602090206105bd9181019083015b8082111561044a57600081805460018160011615610100020316600290046000825580601f1061057c57506105ae565b601f0160209004906000526020600020908101906105ae91905b8082111561044a5760008155600101610436565b5090565b5b505060010161054c565b5090565b5b505050916000526020600020900160005b8390919091509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061061e57805160ff191683800117855561064b565b8280016001018555821561064b579182015b8281111561064b578251825591602001919060010190610630565b5b5061066c9291505b8082111561044a5760008155600101610436565b5090565b5050505b50565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b600281815481101561000057906000526020600020900160005b508054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152935083018282801561072f5780601f106107045761010080835404028352916020019161072f565b820191906000526020600020905b81548152906001019060200180831161071257829003601f168201915b505050505081565b600154608060020a025b90565b60408051808201825260008082528251602081810185528282528084019182526001608060020a031987811680865284526003825294832084518154608060020a909104961695909517855590518051600186018054828255818652948490209596879690959194918101939091018215610873579160200282015b82811115610873578251829080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061081457805160ff1916838001178555610841565b82800160010185558215610841579182015b82811115610841578251825591602001919060010190610826565b5b506108629291505b8082111561044a5760008155600101610436565b5090565b5050916020019190600101906107c0565b5b506108ed9291505b8082111561044a57600081805460018160011615610100020316600290046000825580601f106108ac57506108de565b601f0160209004906000526020600020908101906108de91905b8082111561044a5760008155600101610436565b5090565b5b505060010161087c565b5090565b5050506001608060020a0319841660009081526003602052604090206001908101805491820180825590925082818380158290116109a9576000838152602090206109a99181019083015b8082111561044a57600081805460018160011615610100020316600290046000825580601f10610968575061099a565b601f01602090049060005260206000209081019061099a91905b8082111561044a5760008155600101610436565b5090565b5b5050600101610938565b5090565b5b505050916000526020600020900160005b8490919091509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a0a57805160ff1916838001178555610a37565b82800160010185558215610a37579182015b82811115610a37578251825591602001919060010190610a1c565b5b50610a589291505b8082111561044a5760008155600101610436565b5090565b5050505b505050565b600180546001608060020a031916608060020a83041790555b50565b60408051808201825260008082526020918201528151808301909252825182528281019082018190525b50919050565b60208101518151600091601e19808201929091010182805b82841015610b5a5750825160ff166080811015610ae757600184019350610b4a565b60e08160ff161015610afe57600284019350610b4a565b60f08160ff161015610b1557600384019350610b4a565b60f88160ff161015610b2c57600484019350610b4a565b60fc8160ff161015610b4357600584019350610b4a565b6006840193505b5b5b5b5b5b600190910190610ac5565b8194505b505050509190505600a165627a7a72305820fe1ce7d7850dbc261d548d3cb32cf1c4f15ba463965f65e7f3d5a722010617a20029";

    private DataTypeTest(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public Future<Bytes16> var3(Bytes16 param0) {
        Function function = new Function("var3", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> testUsinglibrary() {
        Function function = new Function("testUsinglibrary", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> setVar(Bytes16 _var1, Utf8String _var2) {
        Function function = new Function("setVar", Arrays.<Type>asList(_var1, _var2), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bytes16> var1() {
        Function function = new Function("var1", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> pushString(Utf8String _var2) {
        Function function = new Function("pushString", Arrays.<Type>asList(_var2), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> var2(Uint256 param0) {
        Function function = new Function("var2", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bytes16> getBytesN() {
        Function function = new Function("getBytesN", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> setStruct(Bytes16 _var1, Utf8String _var2) {
        Function function = new Function("setStruct", Arrays.<Type>asList(_var1, _var2), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> setBytesN(Bytes16 _var1) {
        Function function = new Function("setBytesN", Arrays.<Type>asList(_var1), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<DataTypeTest> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialValue) {
        return deployAsync(DataTypeTest.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialValue);
    }

    public static DataTypeTest load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DataTypeTest(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }
}
