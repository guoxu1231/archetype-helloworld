package dominus.intg.ethereum;

import java.lang.String;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Future;
import org.web3j.abi.Contract;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;

/**
 * <p>Auto generated code.<br>
 * <strong>Do not modifiy!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.</p>
 */
public final class YellowCard extends Contract {
    private static final String BINARY = "";

    private YellowCard(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> CreateCards(DynamicArray<Int256> _cardIds) {
        Function function = new Function("CreateCards", Arrays.<Type>asList(_cardIds), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Bool> GiveToCustomer(Int256 _cardId, Utf8String _to) {
        Function function = new Function("GiveToCustomer", 
                Arrays.<Type>asList(_cardId, _to), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bool> ActiveCard(Int256 _cardId, Utf8String _sender, Int256 _age, Utf8String _startDateTime, Utf8String _endDateTime) {
        Function function = new Function("ActiveCard", 
                Arrays.<Type>asList(_cardId, _sender, _age, _startDateTime, _endDateTime), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<List<Type>> CardList(Int256 param0) {
        Function function = new Function("org.web3j.abi.datatypes.Utf8String", 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return executeCallMultipleValueReturnAsync(function);
    }

    public Future<Bool> TransferToCustomer(Int256 _cardId, Utf8String _from, Utf8String _to) {
        Function function = new Function("TransferToCustomer", 
                Arrays.<Type>asList(_cardId, _from, _to), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> Create(Int256 _cardId) {
        Function function = new Function("Create", Arrays.<Type>asList(_cardId), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public static Future<YellowCard> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialValue) {
        return deployAsync(YellowCard.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialValue);
    }

    public static YellowCard load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new YellowCard(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }
}
